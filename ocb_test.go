package ocb

import (
	"testing"
	"fmt"
	"bytes"
	"crypto/aes"
	"math/rand"
)

// draft-irtf-cfrg-ocb-00 vectors

var (
	tK []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F")
	tN []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B")
	ta0 []byte = []byte("")
	tp0 []byte = []byte("")
	tc0 []byte = []byte("\x19\x7B\x9C\x3C\x44\x1D\x3C\x83\xEA\xFB\x2B\xEF\x63\x3B\x91\x82")
	ta1 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07")
	tp1 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07")
	tc1 []byte = []byte("\x92\xB6\x57\x13\x0A\x74\xB8\x5A\x16\xDC\x76\xA4\x6D\x47\xE1\xEA\xD5\x37\x20\x9E\x8A\x96\xD1\x4E")
	ta2 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07")
	tp2 []byte = []byte("")
	tc2 []byte = []byte("\x98\xB9\x15\x52\xC8\xC0\x09\x18\x50\x44\xE3\x0A\x6E\xB2\xFE\x21")
	ta3 []byte = []byte("")
	tp3 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07")
	tc3 []byte = []byte("\x92\xB6\x57\x13\x0A\x74\xB8\x5A\x97\x1E\xFF\xCA\xE1\x9A\xD4\x71\x6F\x88\xE8\x7B\x87\x1F\xBE\xED")
	ta4 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F")
	tp4 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F")
	tc4 []byte = []byte("\xBE\xA5\xE8\x79\x8D\xBE\x71\x10\x03\x1C\x14\x4D\xA0\xB2\x61\x22\x77\x6C\x99\x24\xD6\x72\x3A\x1F\xC4\x52\x45\x32\xAC\x3E\x5B\xEB")
	ta5 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F")
	tp5 []byte = []byte("")
	tc5 []byte = []byte("\x7D\xDB\x8E\x6C\xEA\x68\x14\x86\x62\x12\x50\x96\x19\xB1\x9C\xC6")
	ta6 []byte = []byte("")
	tp6 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F")
	tc6 []byte = []byte("\xBE\xA5\xE8\x79\x8D\xBE\x71\x10\x03\x1C\x14\x4D\xA0\xB2\x61\x22\x13\xCC\x8B\x74\x78\x07\x12\x1A\x4C\xBB\x3E\x4B\xD6\xB4\x56\xAF")
	ta7 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17")
	tp7 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17")
	tc7 []byte = []byte("\xBE\xA5\xE8\x79\x8D\xBE\x71\x10\x03\x1C\x14\x4D\xA0\xB2\x61\x22\xFC\xFC\xEE\x7A\x2A\x8D\x4D\x48\x5F\xA9\x4F\xC3\xF3\x88\x20\xF1\xDC\x3F\x3D\x1F\xD4\xE5\x5E\x1C")
	ta8 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17")
	tp8 []byte = []byte("")
	tc8 []byte = []byte("\x28\x20\x26\xDA\x30\x68\xBC\x9F\xA1\x18\x68\x1D\x55\x9F\x10\xF6")
	ta9 []byte = []byte("")
	tp9 []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17")
	tc9 []byte = []byte("\xBE\xA5\xE8\x79\x8D\xBE\x71\x10\x03\x1C\x14\x4D\xA0\xB2\x61\x22\xFC\xFC\xEE\x7A\x2A\x8D\x4D\x48\x6E\xF2\xF5\x25\x87\xFD\xA0\xED\x97\xDC\x7E\xED\xE2\x41\xDF\x68")
	taa []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F")
	tpa []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F")
	tca []byte = []byte("\xBE\xA5\xE8\x79\x8D\xBE\x71\x10\x03\x1C\x14\x4D\xA0\xB2\x61\x22\xCE\xAA\xB9\xB0\x5D\xF7\x71\xA6\x57\x14\x9D\x53\x77\x34\x63\xCB\xB2\xA0\x40\xDD\x3B\xD5\x16\x43\x72\xD7\x6D\x7B\xB6\x82\x42\x40")
	tab []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F")
	tpb []byte = []byte("")
	tcb []byte = []byte("\xE1\xE0\x72\x63\x3B\xAD\xE5\x1A\x60\xE8\x59\x51\xD9\xC4\x2A\x1B")
	tac []byte = []byte("")
	tpc []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F")
	tcc []byte = []byte("\xBE\xA5\xE8\x79\x8D\xBE\x71\x10\x03\x1C\x14\x4D\xA0\xB2\x61\x22\xCE\xAA\xB9\xB0\x5D\xF7\x71\xA6\x57\x14\x9D\x53\x77\x34\x63\xCB\x4A\x3B\xAE\x82\x44\x65\xCF\xDA\xF8\xC4\x1F\xC5\x0C\x7D\xF9\xD9")
	tad []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27")
	tpd []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27")
	tcd []byte = []byte("\xBE\xA5\xE8\x79\x8D\xBE\x71\x10\x03\x1C\x14\x4D\xA0\xB2\x61\x22\xCE\xAA\xB9\xB0\x5D\xF7\x71\xA6\x57\x14\x9D\x53\x77\x34\x63\xCB\x68\xC6\x57\x78\xB0\x58\xA6\x35\x65\x9C\x62\x32\x11\xDE\xEA\x0D\xE3\x0D\x2C\x38\x18\x79\xF4\xC8")
	tae []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27")
	tpe []byte = []byte("")
	tce []byte = []byte("\x7A\xEB\x7A\x69\xA1\x68\x7D\xD0\x82\xCA\x27\xB0\xD9\xA3\x70\x96")
	taf []byte = []byte("")
	tpf []byte = []byte("\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27")
	tcf []byte = []byte("\xBE\xA5\xE8\x79\x8D\xBE\x71\x10\x03\x1C\x14\x4D\xA0\xB2\x61\x22\xCE\xAA\xB9\xB0\x5D\xF7\x71\xA6\x57\x14\x9D\x53\x77\x34\x63\xCB\x68\xC6\x57\x78\xB0\x58\xA6\x35\x06\x0C\x84\x67\xF4\xAB\xAB\x5E\x8B\x3C\x20\x67\xA2\xE1\x15\xDC")
)

func TestVectors(test *testing.T) {
	k := tK
	n := [2]uint64{
		0x0000000000010203,
		0x0405060708090A0B,
	}

	ac, _ := aes.NewCipher(k)
	o := New(ac, 16)

	try := func(a, p, c []byte) {
		cx, t := o.Encrypt(a, p, n)
				
	 	ov := make([]byte, len(cx) + len(t))
	 	copy(ov[0:], cx)
	 	copy(ov[len(cx):], t)
	 	if bytes.Compare(ov, c) != 0 {
	 		fmt.Printf("%X != %X", ov, c)
	 		panic("failure")
	 	}

		px, _ := o.Decrypt(a, cx, t, n)
		if bytes.Compare(px, p) != 0 { 
	 		fmt.Printf("%X != %X", px, p)
	 		test.Errorf("failure")
		}

		// skip the vector with no actual ciphertext
		if len(cx) > 0 { 
			// flip 100 random bits, verify mac fails
			for j := 0; j < 100; j++ {
				idx := rand.Uint32() % uint32(len(cx))
				bit := rand.Uint32() % 8
				old := cx[idx]
				cx[idx] ^= (1 << bit)
				_, err := o.Decrypt(a, cx, t, n)
				if err == nil {
					test.Errorf("MAC false")
				}
				cx[idx] = old
			}
		}
	}

	a := ta0; p := tp0; c := tc0; try(a, p, c); fmt.Printf("beat 0\n")
	a = ta1; p = tp1; c = tc1; try(a, p, c); fmt.Printf("beat 1\n")
	a = ta2; p = tp2; c = tc2; try(a, p, c); fmt.Printf("beat 2\n")
	a = ta3; p = tp3; c = tc3; try(a, p, c); fmt.Printf("beat 3\n")
	a = ta4; p = tp4; c = tc4; try(a, p, c); fmt.Printf("beat 4\n")
	a = ta5; p = tp5; c = tc5; try(a, p, c); fmt.Printf("beat 5\n")
	a = ta6; p = tp6; c = tc6; try(a, p, c); fmt.Printf("beat 6\n")
	a = ta7; p = tp7; c = tc7; try(a, p, c); fmt.Printf("beat 7\n")
	a = ta8; p = tp8; c = tc8; try(a, p, c); fmt.Printf("beat 8\n")
	a = ta9; p = tp9; c = tc9; try(a, p, c); fmt.Printf("beat 9\n")
	a = taa; p = tpa; c = tca; try(a, p, c); fmt.Printf("beat a\n")
	a = tab; p = tpb; c = tcb; try(a, p, c); fmt.Printf("beat b\n")
	a = tac; p = tpc; c = tcc; try(a, p, c); fmt.Printf("beat c\n")
	a = tad; p = tpd; c = tcd; try(a, p, c); fmt.Printf("beat d\n")
	a = tae; p = tpe; c = tce; try(a, p, c); fmt.Printf("beat e\n")
	a = taf; p = tpf; c = tcf; try(a, p, c); fmt.Printf("beat f\n")
}
